#include <stdio.h>
#include <stdlib.h>

struct stack
{
    int size;
    int top;
    int *arr;
};

int isEmpty(struct stack *ptr)
{
    if (ptr->top == -1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int isFull(struct stack *ptr)
{
    if (ptr->top == ptr->size - 1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void push(struct stack *ptr, int value)
{
    if (isFull(ptr))
    {
        printf("Stack Overflow\n");
    }
    else
    {
        ptr->top++;
        ptr->arr[ptr->top] = value;
        printf("Element Addded Successfully:");
    }
}

int pop(struct stack *ptr)
{
    if(isEmpty(ptr))
    {
        printf("Stack Underflow\n");
        return -1;
    }
    else
    {
        int value = ptr->arr[ptr->top];
        ptr->top--;
        printf("Element Deleted Successfully:");
        return value;
    }
}

int peek(struct stack *sp, int i){
    int indArr = sp->top - i + 1;

    if(indArr<0){
        printf("Not a valid Index: ");
    }
    else{
        return sp->arr[indArr];
    }
}

int main()
{
    struct stack *sp = (struct stack *)malloc(sizeof(struct stack));

    sp->size = 5;
    sp->top = -1;
    sp->arr = (int *)malloc(sp->size * sizeof(int));
    printf("Stack Printed Successfully:\n");
    printf("%d\n", isEmpty(sp));
    printf("%d", isFull(sp));
    push(sp, 32);
    printf("%d\n");
    push(sp, 31);
    printf("%d\n");
    push(sp, 33);
    printf("%d\n");
    push(sp, 35);
    printf("%d\n");
    push(sp, 39);
    printf("%d\n");

    for(int j=1; j<sp->top+1;j++){
    printf("Element at %d is %d\n", j, peek(sp, j));
    }
    printf("%d",pop(sp));
}
